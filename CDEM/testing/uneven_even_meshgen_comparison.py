'''
Created on Nov 24, 2015

@author: vancik

Comparison of an even mesh generated by uneven and even generators
'''

from CDEM.basic import *
from CDEM.utils import *
import numpy as np

dom1 = get_uneven_mesh(ni0=3, nj=16, lx=100., ly=30., stencil_arr=['0', '0', '0', 'f', '0', '0', 'f', '0', '0', 'c', '0', '0', 'c', '0', '0', '0'],
                             E=10000., nu=0.2, density=1.,
                             thickness=1., alfaC=1., stiffdef='isoparametric',
                             c_n=1000., c_s=1000., domtype='CDEMStatic',
                             load=[((45.0, 55.0), (29.9, 30.1), [0., -10.])],
                             supports=[((-0.1, 0.1), (-0.1, 0.1), [1, 1]), ((99.9, 100.1), (-0.1, 0.1), [0, 1])])

dom1.solve()
refnodes = dom1.get_node_by_coords(50., 30., 1e-3)
refnd = refnodes[0]
print 'Reference node coordinates: x = %f, y = %f' % (dom1.nodes[refnd].x, dom1.nodes[refnd].y)
print 'CDEM static uneven mesh deflection: %.6f' % dom1.nodes[refnd].v_disp[1]
# print 'CDEM static uneven mesh sigma_x L2 norm: %.6f' % dom1.get_stress_norm([0])
dom1.plot()

dom2 = get_2D_quadrangle_domain(ni=3, nj=10, lx=100., ly=30., E=10000., nu=0.2, density=1.,
                             thickness=1., stiffdef='isoparametric',
                             c_n=1000., c_s=1000., domtype='CDEMStatic',
                             load=[((49.9, 50.1), (29.9, 30.1), [0., -50.])],
                             supports=[((-0.1, 0.1), (-0.1, 0.1), [1, 1]), ((99.9, 100.1), (-0.1, 0.1), [0, 1])])

dom2.solve()
refnodes = dom2.get_node_by_coords(50., 30., 1e-3)
refnd = refnodes[0]
print 'Reference node coordinates: x = %f, y = %f' % (dom2.nodes[refnd].x, dom2.nodes[refnd].y)
print 'CDEM static even mesh deflection: %.6f' % dom2.nodes[refnd].v_disp[1]
print 'CDEM static even mesh sigma_x L2 norm: %.6f' % dom2.get_stress_norm(ids=[0])
dom2.plot()

'''
nds1 = dom1.nodes
nds2 = dom2.nodes
for i in range(len(nds1)):
    nbr1 = nds1[i].neighbors
    nbr2 = nds2[i].neighbors
    if not all([nbr1[j] == nbr2[j] for j in range(2)]):
        print 'Different neighbors for node %d:' % (i + 1)
        print '    neighbors uneven: ', nbr1
        print '    neighbors even: ', nbr2
'''

